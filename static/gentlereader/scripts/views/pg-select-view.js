// Generated by CoffeeScript 1.6.1
/* Creates a select menu whose displayed options reflect a collection's models and
the current sort values. Must be called with the following options:
- pageDetails: an array of objects with information about where each
page starts and ends, formatted thus
[ { startIndex: value1, startMod: model1, endIndex: value2, endMod: model2 }, ... ]
- sortField (optional): a field to sort by (date_entered, author, or pub_year)
(without this, the model's "name" will be displayed by default)
- router: a router used to navigate to new pages
- container (optional): if the container's id is other than "page-select-container"
- dataType: what is being paginated (e.g. selection, genre, author)
- startPage: which page should be initially selected (should be "all" or 1)?
*/

define(['backbone', 'templates/pgSelectTempl'], function(Backbone, pgSelectTempl) {
  var PgSelectView;
  PgSelectView = Backbone.View.extend({
    template: pgSelectTempl,
    initialize: function(options) {
      _.extend(this, options);
      return this.render();
    },
    getModelDisplay: function(model) {
      /* From each relevant model, get the proper value to display in
      the pageSelect. This relies on the option "dataType" passed when
      the View is instantiated. pageSelects for selection lists can show
      date entered, author last name, or pub year; for author lists just
      last name; for tags just name.
      */
      if (this.dataType === "selections") {
        switch (this.sortField) {
          case "date_entered":
            return model.get("date_entered_simple");
          case "author":
            return model.get("source").author.last_name.toUpperCase();
          case "pub_year":
            return model.get("source").date_display;
        }
      } else if (this.dataType === "authors") {
        return model.get("last_name").toUpperCase();
      } else {
        return model.get("name").toUpperCase();
      }
    },
    events: {
      "change": "changePage",
      "click .page-select-arrow": "flipPage"
    },
    changePage: function() {
      var director, page, sorter, url;
      if (this.router) {
        page = $("#page-select").val();
        /* The "sorted" option is passed as "true" (on instantiation)
        if the data can be sorted (NOT tags, which are always in
        ascending alphabetical order.)
        */

        if (this.sorted) {
          sorter = $("#sort-field").val();
          director = $("#sort-direction").val();
          url = "page/" + sorter + director + "/" + page;
          this.router.navigate(url, {
            trigger: true
          });
        } else {
          this.router.navigate("page/" + page, {
            trigger: true
          });
        }
        return this.changeSelectedPage();
      } else {
        return console.log("No router found.");
      }
    },
    changeSelectedPage: function() {
      return $('#selected-page').html($('#page-select option:selected').text());
    },
    flipPage: function() {
      var $clicked, $pgSelect, currentPage, move, newPage, pgVal;
      $clicked = $(event.target);
      move = $clicked.hasClass("u-left") ? "prev" : "next";
      $pgSelect = $("#page-select");
      pgVal = $pgSelect.val();
      if (pgVal === 'all') {
        if (move === "prev") {
          newPage = this.pgParams.length;
        } else {
          newPage = 1;
        }
      } else {
        currentPage = parseInt($pgSelect.val());
        newPage = $clicked.hasClass("u-left") ? currentPage - 1 : currentPage + 1;
      }
      return $pgSelect.val(newPage.toString()).trigger("change");
    },
    render: function() {
      var container, end, i, itemCount, params, pg, pgCount, results, start, templateVars, _i, _len;
      params = this.pgParams;
      if (params) {
        /* If no "container" option has been passed,
        default to #page-select-container.
        */

        container = this.container || $("#page-select-container");
        pgCount = params.length;
        itemCount = params[pgCount - 1].endIndex + 1;
        container.off().empty();
        templateVars = {
          itemCount: itemCount,
          dataType: this.dataType,
          pages: []
        };
        for (i = _i = 0, _len = params.length; _i < _len; i = ++_i) {
          pg = params[i];
          start = this.getModelDisplay(pg.startModel);
          end = this.getModelDisplay(pg.endModel);
          results = {
            sel: this.startPage === 1 && i === 0 ? " selected" : "",
            fill: start !== end ? "" + start + " to " + end : start,
            num: i + 1
          };
          templateVars.pages.push(results);
        }
        this.$el.append(this.template(templateVars));
        container.append(this.el);
        this.changeSelectedPage();
      } else {
        console.log("No page details found.");
      }
      return this;
    }
  });
  return PgSelectView;
});
