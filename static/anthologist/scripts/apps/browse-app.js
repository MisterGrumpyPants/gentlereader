// Generated by CoffeeScript 1.6.1

define(['backbone', 'models/tag-set', 'views/pg-select-view', 'views/br-tag-view', 'routers/br-tag-router', 'utils/pagination-details', 'utils/globals'], function(Backbone, TagSet, PgSelectView, renderTagCollection, BrTagRouter, paginationDetails, globals) {
  var BrowseApp;
  globals = globals.getGlobals();
  BrowseApp = Backbone.View.extend({
    settings: {
      itemsPerPage: 10,
      container: $("#tag-list"),
      dataType: tagType,
      startPage: "all"
    },
    initialize: function() {
      return this.getTags();
    },
    getTags: function() {
      var tSet,
        _this = this;
      tSet = this.tagSet = new TagSet();
      tSet.url = "/api/" + this.settings.dataType;
      return tSet.fetch({
        error: function() {
          return console.log("The tag set couldn't be fetched.");
        },
        success: function() {
          _this.setPagination();
          if (_this.pgCount > 1) {
            _this.router = new BrTagRouter({
              pageChanger: _this.pageChanger
            });
            _this.router.navigate("page/all", {
              replace: true
            });
            return _this.getPageSelect();
          }
        }
      });
    },
    setPagination: function() {
      var pgDetails;
      pgDetails = paginationDetails(this.tagSet, this.settings.itemsPerPage);
      this.pgParams = pgDetails.startEndModels;
      return this.pgCount = pgDetails.pgCount;
    },
    getPageSelect: function() {
      var pgView;
      return pgView = new PgSelectView({
        pgParams: this.pgParams,
        router: this.router,
        dataType: this.settings.dataType,
        startPage: this.settings.startPage
      });
    },
    pageChanger: function(page) {
      var options;
      options = {
        collection: this.tagSet,
        page: page,
        pgParams: this.pgParams,
        container: this.settings.container
      };
      return renderTagCollection(options);
    }
  });
  return BrowseApp;
});
