// Generated by CoffeeScript 1.6.1

define(['backbone', 'models/rand-quot-set', 'views/rand-quot-view', 'lib/scrollintoview'], function(Backbone, RandQuotSet, RandQuotView) {
  var RandQuotApp, removeStyle;
  removeStyle = function() {
    var $a, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      $a = arguments[_i];
      _results.push($a.removeAttr("style"));
    }
    return _results;
  };
  RandQuotApp = Backbone.View.extend({
    initialize: function() {
      this["dom"] = {};
      this.dom.body = $(".rq-body");
      this.dom.back = $(".rq-backdrop");
      this.dom.cont = $(".rq-content");
      this.setClickEvents();
      return this.getQuot();
    },
    setClickEvents: function() {
      var _this = this;
      return $(function() {
        $(".rq-btn").click(function() {
          return _this.showQuot();
        });
        $(".rq-background, .rq-close").click(function() {
          return _this.hideQuot();
        });
        return $(".rq-another").click(function() {
          return _this.getQuot();
        });
      });
    },
    getQuot: function() {
      var randQuotSet,
        _this = this;
      randQuotSet = new RandQuotSet();
      return randQuotSet.fetch({
        cache: false,
        error: function() {
          return console.log("Failed to fetch a random quotation.");
        },
        success: function() {
          return _this.renderQuot(randQuotSet);
        }
      });
    },
    renderQuot: function(randQuotSet) {
      var params;
      this["settings"] = {};
      this.settings.desktop = document.width >= 760 ? true : false;
      params = {
        model: randQuotSet.models[0]
      };
      /* If there is no @activeQuot, this highlight's view will
      be it. If there is one already, set the "offscreen" option
      on the view and run @switchQuot.
      */

      if (!this.activeQuot) {
        return this.activeQuot = new RandQuotView(params);
      } else {
        params["offscreen"] = true;
        this.offscreenQuot = new RandQuotView(params);
        return this.switchQuot();
      }
    },
    switchQuot: function() {
      /* Animate a transition between active and offscreen
      highlights; then destroy the old view and make
      the new one the app's @activeQuot.
      */

      var $offQuotEl,
        _this = this;
      $offQuotEl = $(this.offscreenQuot.el);
      this.dom.cont.height(this.dom.cont.height());
      this.dom.cont.width(this.dom.cont.width());
      return $(this.activeQuot.el).fadeOut(function() {
        _this.activeQuot.remove();
        _this.dom.cont.animate({
          height: $offQuotEl.height() + "px"
        }, function() {
          var scrollTo;
          $offQuotEl.css({
            position: "static",
            right: "auto"
          });
          $offQuotEl.animate({
            opacity: "1"
          });
          scrollTo = _this.settings.desktop ? $("h1.browse-h") : $("#rqTop");
          scrollTo.scrollintoview();
          return removeStyle($offQuotEl, _this.dom.cont);
        });
        _this.activeQuot = _this.offscreenQuot;
        return _this.offscreenQuot = "";
      });
    },
    showQuot: function() {
      var currentTop;
      this.dom.body.toggle();
      currentTop = $(window).scrollTop();
      this.dom.body.css({
        top: currentTop
      });
      this.dom.back.fadeIn("fast");
      return this.dom.body.addClass("show");
    },
    hideQuot: function() {
      var _this = this;
      return this.dom.body.animate({
        top: "-1000px"
      }, 200, "linear", function() {
        return _this.dom.back.fadeToggle("slow", function() {
          _this.dom.body.removeClass("show").toggle();
          return removeStyle($(_this.dom.body, _this.dom.back));
        });
      });
    }
  });
  return RandQuotApp;
});
